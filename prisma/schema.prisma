generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String    @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  role           String    @default("USER")
  accounts       Account[]
  sessions       Session[]
  managedShop    Shop[]    @relation("ShopOwner") // A user can manage one shop
  cashierProfile Cashier?  @relation("CashierProfile") // A user can have one cashier profile
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model Cashier {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  phone     String?
  isActive  Boolean  @default(true)
  status    String   @default("AVAILABLE")
  user      User?    @relation("CashierProfile", fields: [userId], references: [id])
  userId    String?  @unique @db.ObjectId
  shop      Shop     @relation(fields: [shopId], references: [id])
  shopId    String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Shop {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  location           String
  shopCommission     Float               @default(0.0)
  systemCommission   Float               @default(0.0)
  walletBalance      Float               @default(0.0)
  cashiers           Cashier[]
  manager            User?               @relation("ShopOwner", fields: [managerId], references: [id])
  managerId          String?             @db.ObjectId
  walletTransactions WalletTransaction[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model WalletTransaction {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  shop      Shop     @relation(fields: [shopId], references: [id], onDelete: Cascade)
  shopId    String   @db.ObjectId
  amount    Float
  type      String // e.g., "credit" or "debit"
  reference String?
  createdAt DateTime @default(now())
}
